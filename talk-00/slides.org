#+TITLE: pybind11: использование c++ из Python
#+AUTHOR: Александр Крутиков
#+EMAIL: a.krutikov@innopolis.ru

#+REVEAL_THEME: white
#+EXPORT_FILE_NAME: ../docs/00pybind11
#+REVEAL_INIT_OPTIONS: hash:true, slideNumber:true, controls:false
#+REVEAL_EXTRA_CSS: css/custom.css
#+REVEAL_TITLE_SLIDE: <img class="title-image" height="200px" src="https://pybind11.readthedocs.io/en/stable/_images/pybind11-logo.png">
#+REVEAL_TITLE_SLIDE: <h3 class="subtitle">Использование c++ из python</h3><p class="author">%a</p><p class="date">2020-04-15</p>
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil

* Intro
[[https://docs.python.org/3/extending/extending.html][Расширение python]]
#+BEGIN_SRC cpp
PyMODINIT_FUNC
PyInit_spam(void)
{
    PyObject *m;

    m = PyModule_Create(&spammodule);
    if (m == NULL)
        return NULL;

    SpamError = PyErr_NewException("spam.error", NULL, NULL);
    Py_XINCREF(SpamError);
    if (PyModule_AddObject(m, "error", SpamError) < 0) {
        Py_XDECREF(SpamError);
        Py_CLEAR(SpamError);
        Py_DECREF(m);
        return NULL;
    }

    return m;
}
#+END_SRC
* Первый пример
#+BEGIN_SRC cpp
struct Pet {
    Pet(const std::string &name) : name(name) { }
    void setName(const std::string &name_) { name = name_; }
    const std::string &getName() const { return name; }

    std::string name;
};
#+END_SRC
* Код обертки для первого примера
#+BEGIN_SRC cpp
#include <pybind11/pybind11.h>

namespace py = pybind11;

PYBIND11_MODULE(example, m) {
    py::class_<Pet>(m, "Pet")
        .def(py::init<const std::string &>())
        .def("setName", &Pet::setName)
        .def("getName", &Pet::getName);
}
#+END_SRC
* Перегрузка методов
#+BEGIN_SRC c++
py::class_<Pet>(m, "Pet")
    .def("set", py::overload_cast<int>(&Pet::set), "Set the pet's age")
    .def("set", py::overload_cast<const std::string &>(&Pet::set), "Set the pet's name");
#+END_SRC
* Перегрузка операторов
#+BEGIN_SRC c++
#include <pybind11/operators.h>

PYBIND11_MODULE(example, m) {
    py::class_<Vector2>(m, "Vector2")
        .def(py::init<float, float>())
        .def(py::self + py::self)
        .def(py::self += py::self)
        .def(py::self *= float())
        .def(float() * py::self)
        .def(py::self * float())
        .def(-py::self)
        .def("__repr__", &Vector2::toString);
}
#+END_SRC
* return_value_policy
#+BEGIN_SRC c++
/* Function declaration */
Data *get_data() { return _data; /* (pointer to a static data structure) */ }
...

/* Binding code */
m.def("get_data", &get_data, return_value_policy::reference);
#+END_SRC
- return_value_policy::take_ownership
- return_value_policy::copy
- return_value_policy::move
- return_value_policy::reference
- return_value_policy::reference_internal
- return_value_policy::automatic
- return_value_policy::automatic_reference
* Исключения
| C++ exception type          | Python exception type    |
|-----------------------------+--------------------------|
| std::exception              | RuntimeError             |
| std::bad_alloc              | MemoryError              |
| std::out_of_range           | IndexError               |
| std::overflow_error         | OverflowError            |
| pybind11::stop_iteration    | StopIteration            |
| pybind11::error_already_set | Python API calls for C++ |

* Задачи
- [[https://pybind11.readthedocs.io/en/stable/advanced/classes.html#overriding-virtuals][Перезапись виртуальных функций в python]]
- Интерпретация ключей мапы как методов класса python
- [[https://pybind11.readthedocs.io/en/stable/advanced/classes.html#module-local-class-bindings][Разделение на несколько библиотек]]
- [[https://pybind11.readthedocs.io/en/stable/advanced/exceptions.html#registering-custom-translators][Регистрация своего исключения]]
- [[https://pybind11.readthedocs.io/en/stable/advanced/cast/stl.html#making-opaque-types][Работа с stl-вектором в NumPy]]
- [[https://pybind11.readthedocs.io/en/stable/advanced/cast/eigen.html#eigen][Работа с Eigen-вектором в NumPy]]

