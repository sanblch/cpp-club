#+TITLE: Теория шаблонного программирования
#+AUTHOR: Александр Крутиков
#+EMAIL: a.krutikov@innopolis.ru

#+REVEAL_THEME: white
#+EXPORT_FILE_NAME: ../docs/04templatebasics
#+REVEAL_INIT_OPTIONS: hash:true, slideNumber:true, controls:false
#+REVEAL_EXTRA_CSS: css/custom.css
#+REVEAL_TITLE_SLIDE: <img class="title-image" height="200px" src="https://cdn.dribbble.com/users/46200/screenshots/4107676/cpp_dribble_1.png">
#+REVEAL_TITLE_SLIDE: <h3 class="subtitle">Теория шаблонного программирования</h3><p class="author">%a</p><p class="date">2020-05-26</p>
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil

* Кратко теория
** Определения
- Шаблон (template)
- Специализация шаблона (template specialization)
- Частичная специализация шаблона (partial template specialization)
** Типы шаблонов
- По типу абстракции
- По типу аргументов
- По числу аргументов
* <type_traits>
** std::integral_constant
#+BEGIN_SRC c++
  template <class T, T v> struct integral_constant {
    static constexpr T value = v;
    typedef T value_type;
    typedef integral_constant type;
    constexpr operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; }
  };
#+END_SRC
** std::true_type
#+BEGIN_SRC c++
using true_type = integral_constant<bool, true>;
#+END_SRC
** std::false_type
#+BEGIN_SRC c++
using false_type = integral_constant<bool, false>;
#+END_SRC
** std::is_same
#+BEGIN_SRC c++
template<class T, class U>
struct is_same : std::false_type {};
 
template<class T>
struct is_same<T, T> : std::true_type {};

template< class T, class U >
inline constexpr bool is_same_v = is_same<T, U>::value;
#+END_SRC
* SFINAE
** Определение
Substitution Failure Is Not An Error
** Алгоритм
- Поиск функции по имени
- Выделение шаблонных аргументов (отмена при ошибке подстановки)
- Конечный список подходящих функций
- Выбор лучшей походящей функции (ошибка, если больше одного кандидата)
* std::enable_if
** Реализация
#+BEGIN_SRC c++
template<bool B, class T = void>
struct enable_if {};
 
template<class T>
struct enable_if<true, T> { typedef T type; };

template< bool B, class T = void >
using enable_if_t = typename enable_if<B,T>::type;
#+END_SRC
** Варианты использования
- В шаблоне
- В возвращаемом типе
- В аргументах
** Альтернатива
- constexpr
- tag dispatching
* Ссылки
- [[https://www.bfilipek.com/2016/02/notes-on-c-sfinae.html][Filipek. Notes on C++ SFINAE]]
- [[https://en.cppreference.com/w/cpp/header/type_traits][<type_traits>]]
